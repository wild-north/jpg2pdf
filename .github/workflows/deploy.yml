name: Deploy to North Lab

on:
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy via SSH
        id: deploy
        timeout-minutes: 15
        uses: appleboy/ssh-action@v1.0.3
        env:
          LM_STUDIO_URL: ${{ secrets.LM_STUDIO_URL }}
          PORT: ${{ secrets.PORT || '3000' }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: LM_STUDIO_URL,PORT
          script: |
            set -e
            set -o pipefail
            
            echo "=========================================="
            echo "Starting deployment to ~/apps/jpg2pdf"
            echo "=========================================="
            
            cd ~/apps/jpg2pdf
            
            if [ ! -d .git ]; then
              echo "‚ùå Error: Not a git repository"
              exit 1
            fi
            
            echo ""
            echo "Creating .env file from GitHub secrets..."
            echo "PORT=${PORT}" > .env
            echo "NODE_ENV=production" >> .env
            echo "LM_STUDIO_URL=${LM_STUDIO_URL}" >> .env
            echo "‚úì .env file created successfully"
            
            echo "Current directory: $(pwd)"
            echo "Git status before pull:"
            git status --short
            
            echo ""
            echo "Creating backup of current Docker image..."
            
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_TAG="jpg2pdf-jpg2pdf:backup_${BACKUP_TIMESTAMP}"
            
            if docker images | grep -q "^jpg2pdf-jpg2pdf "; then
              echo "Tagging current image as ${BACKUP_TAG}"
              docker tag jpg2pdf-jpg2pdf:latest ${BACKUP_TAG}
              echo "Backup created successfully!"
            else
              echo "No existing image found, skipping backup"
            fi
            
            echo ""
            echo "Cleaning up old backups (keeping only 2 most recent)..."
            
            BACKUP_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^jpg2pdf-jpg2pdf:backup_" | sort -r)
            BACKUP_COUNT=$(echo "$BACKUP_IMAGES" | grep -c "^jpg2pdf-jpg2pdf:backup_" || true)
            
            if [ "$BACKUP_COUNT" -gt 2 ]; then
              echo "Found ${BACKUP_COUNT} backups, removing old ones..."
              echo "$BACKUP_IMAGES" | tail -n +3 | while read img; do
                echo "Removing old backup: $img"
                docker rmi "$img" || true
              done
            else
              echo "Backup count is ${BACKUP_COUNT}, no cleanup needed"
            fi
            
            echo ""
            echo "Checking disk space..."
            DISK_USAGE=$(df -h . | awk 'NR==2 {print $5}' | sed 's/%//')
            echo "Disk usage: ${DISK_USAGE}%"
            if [ "$DISK_USAGE" -gt 90 ]; then
              echo "‚ö†Ô∏è Warning: Disk usage is high (${DISK_USAGE}%)"
            fi
            
            echo ""
            echo "Saving current commit hash..."
            OLD_COMMIT=$(git rev-parse HEAD)
            echo "DEPLOY_OLD_COMMIT=$OLD_COMMIT"
            
            echo ""
            echo "Checking for uncommitted changes..."
            if [ -n "$(git status --porcelain)" ]; then
              echo "‚ö†Ô∏è Warning: Uncommitted changes detected"
              git status --short
            fi
            
            echo ""
            echo "Pulling latest code from repository..."
            OUTPUT=$(git pull --ff-only)
            echo "$OUTPUT"
            
            if echo "$OUTPUT" | grep -q "Already up to date"; then
              echo ""
              echo "‚è≠Ô∏è DEPLOYMENT_SKIPPED: No new commits"
              exit 0
            fi
            
            echo ""
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "DEPLOY_NEW_COMMIT=$NEW_COMMIT"
            echo "Deployed commits: $OLD_COMMIT -> $NEW_COMMIT"
            
            echo ""
            echo "Stopping current containers..."
            docker compose down --remove-orphans
            
            echo ""
            echo "Building and starting new containers..."
            docker compose up -d --build
            
            echo ""
            echo "Waiting for container to be healthy..."
            
            HEALTHCHECK_URL="http://localhost:${PORT}/jpg2pdf/api/health"
            MAX_ATTEMPTS=30
            ATTEMPT=0
            
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              ATTEMPT=$((ATTEMPT + 1))
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
              
              if wget --spider --quiet --tries=1 --timeout=2 "$HEALTHCHECK_URL" 2>/dev/null; then
                echo "‚úì Application is healthy!"
                break
              fi
              
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚úó Health check failed after $MAX_ATTEMPTS attempts"
                echo "Container logs:"
                docker compose logs --tail=50
                exit 1
              fi
              
              sleep 2
            done
            
            echo ""
            echo "=========================================="
            echo "Deployment completed successfully!"
            echo "=========================================="
            echo ""
            echo "Container status:"
            docker compose ps
            
            echo ""
            echo "Available backups:"
            docker images | grep "jpg2pdf" || echo "No images found"
            
            echo ""
            echo "Logging deployment..."
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Deployed $NEW_COMMIT" >> deploy.log
            

      - name: Check Dependencies
        if: steps.deploy.outcome == 'success'
        run: |
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update -qq && sudo apt-get install -y jq
          else
            echo "‚úì jq is already installed"
          fi

      - name: Get Previous Deployment
        if: steps.deploy.outcome == 'success' && !contains(steps.deploy.outputs.stdout, 'DEPLOYMENT_SKIPPED')
        id: prev_deploy
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 2
            });
            
            if (deployments.data.length >= 2) {
              return deployments.data[1].sha;
            }
            
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            return commits.data[5]?.sha || commits.data[commits.data.length - 1]?.sha;
      
      - name: Create Deployment Record
        if: steps.deploy.outcome == 'success' && !contains(steps.deploy.outputs.stdout, 'DEPLOYMENT_SKIPPED')
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
      
      - name: Fetch Deployed Commits
        if: steps.deploy.outcome == 'success' && steps.prev_deploy.outputs.result
        id: commits
        run: |
          OLD_COMMIT="${{ steps.prev_deploy.outputs.result }}"
          NEW_COMMIT="${{ github.sha }}"
          
          echo "Commit range: $OLD_COMMIT...$NEW_COMMIT"
          
          if [ -z "$OLD_COMMIT" ] || [ "$OLD_COMMIT" = "null" ]; then
            echo "‚ö†Ô∏è No previous deployment found, showing recent commits"
            curl -s --max-time 10 \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits?per_page=5" > commits.json
            
            COMMITS=$(cat commits.json)
          else
            echo "Fetching commits from GitHub API..."
            curl -s --max-time 10 \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/compare/${OLD_COMMIT}...${NEW_COMMIT}" > compare.json
            
            COMMITS=$(jq '.commits' compare.json)
          fi
          
          echo "commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          COMMIT_COUNT=$(echo "$COMMITS" | jq 'length')
          echo "‚úì Found $COMMIT_COUNT commits"

      - name: Create Deployment Summary
        if: always()
        run: |
          if [[ "${{ steps.deploy.outcome }}" == "success" ]]; then
            if grep -q "DEPLOYMENT_SKIPPED" <<< "${{ steps.deploy.outputs.stdout }}" 2>/dev/null; then
              echo "## ‚è≠Ô∏è Deployment Skipped" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "No new commits to deploy." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- ‚è±Ô∏è **Checked at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- üì¶ **Latest Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- ‚è±Ô∏è **Completed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
              echo "- üê≥ **Backup Created**: Check deployment logs for backup tag" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úì Health check passed successfully" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üìù Deployed Commits" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              COMMITS_JSON='${{ steps.commits.outputs.commits_json }}'
              if [ -n "$COMMITS_JSON" ] && [ "$COMMITS_JSON" != "null" ]; then
                echo "$COMMITS_JSON" | jq -r '.[] | "- [\(.sha[0:7])](\(.html_url)) **\(.commit.message | split("\n")[0])** _by \(.commit.author.name)_"' >> $GITHUB_STEP_SUMMARY || echo "_Error parsing commits_" >> $GITHUB_STEP_SUMMARY
              else
                echo "_No commit information available_" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          elif [[ "${{ steps.deploy.outcome }}" == "failure" ]]; then
            echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Health check failed after 30 attempts." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- ‚è±Ô∏è **Failed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "- üê≥ **Backup available**: Check deployment logs for backup tag" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Next steps**: Use the Rollback workflow to restore previous version" >> $GITHUB_STEP_SUMMARY
          fi