name: Deploy to Home Server

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "=========================================="
            echo "Starting deployment to ~/apps/jpg2pdf"
            echo "=========================================="
            
            cd ~/apps/jpg2pdf
            
            echo "Current directory: $(pwd)"
            echo "Git status before pull:"
            git status --short
            
            echo ""
            echo "Creating backup of current Docker image..."
            
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_TAG="jpg2pdf-jpg2pdf:backup_${BACKUP_TIMESTAMP}"
            
            if docker images | grep -q "^jpg2pdf-jpg2pdf "; then
              echo "Tagging current image as ${BACKUP_TAG}"
              docker tag jpg2pdf-jpg2pdf:latest ${BACKUP_TAG}
              echo "Backup created successfully!"
            else
              echo "No existing image found, skipping backup"
            fi
            
            echo ""
            echo "Cleaning up old backups (keeping only 2 most recent)..."
            
            BACKUP_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^jpg2pdf-jpg2pdf:backup_" | sort -r)
            BACKUP_COUNT=$(echo "$BACKUP_IMAGES" | grep -c "^jpg2pdf-jpg2pdf:backup_" || true)
            
            if [ "$BACKUP_COUNT" -gt 2 ]; then
              echo "Found ${BACKUP_COUNT} backups, removing old ones..."
              echo "$BACKUP_IMAGES" | tail -n +3 | while read img; do
                echo "Removing old backup: $img"
                docker rmi "$img" || true
              done
            else
              echo "Backup count is ${BACKUP_COUNT}, no cleanup needed"
            fi
            
            echo ""
            echo "Pulling latest code from repository..."
            OUTPUT=$(git pull)
            echo "$OUTPUT"
            
            if echo "$OUTPUT" | grep -q "Already up to date"; then
              echo ""
              echo "⏭️ DEPLOYMENT_SKIPPED: No new commits"
              echo "SKIP" > /tmp/deployment_status
              echo "$(git rev-parse --short HEAD)" > /tmp/deployment_commit
              exit 0
            fi
            
            echo ""
            echo "Stopping current containers..."
            docker compose down
            
            echo ""
            echo "Building and starting new containers..."
            docker compose up -d --build
            
            echo ""
            echo "Waiting for container to be healthy..."
            
            HEALTHCHECK_URL="http://localhost:3000/jpg2pdf/api/health"
            MAX_ATTEMPTS=30
            ATTEMPT=0
            
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              ATTEMPT=$((ATTEMPT + 1))
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
              
              if wget --spider --quiet --tries=1 --timeout=2 "$HEALTHCHECK_URL" 2>/dev/null; then
                echo "✓ Application is healthy!"
                break
              fi
              
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "✗ Health check failed after $MAX_ATTEMPTS attempts"
                echo "Container logs:"
                docker compose logs --tail=50
                echo "FAILED" > /tmp/deployment_status
                echo "$(git rev-parse --short HEAD)" > /tmp/deployment_commit
                echo "${BACKUP_TAG}" > /tmp/deployment_backup
                exit 1
              fi
              
              sleep 2
            done
            
            echo ""
            echo "=========================================="
            echo "Deployment completed successfully!"
            echo "=========================================="
            echo ""
            echo "Container status:"
            docker compose ps
            
            echo ""
            echo "Available backups:"
            docker images | grep "jpg2pdf" || echo "No images found"
            
            echo "SUCCESS" > /tmp/deployment_status
            echo "$(git rev-parse --short HEAD)" > /tmp/deployment_commit
            echo "$(git log -1 --pretty=%B | head -n 1)" > /tmp/deployment_message
            echo "${BACKUP_TAG}" > /tmp/deployment_backup

      - name: Create Success Summary
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/apps/jpg2pdf
            
            if [ -f /tmp/deployment_status ]; then
              STATUS=$(cat /tmp/deployment_status)
              
              if [ "$STATUS" = "SKIP" ]; then
                COMMIT=$(cat /tmp/deployment_commit)
                echo "## ⏭️ Deployment Skipped" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "No new commits to deploy." >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "- 📦 **Current commit**: \`${COMMIT}\`" >> $GITHUB_STEP_SUMMARY
                echo "- ⏱️ **Checked at**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
              elif [ "$STATUS" = "SUCCESS" ]; then
                COMMIT=$(cat /tmp/deployment_commit)
                MESSAGE=$(cat /tmp/deployment_message)
                BACKUP=$(cat /tmp/deployment_backup)
                
                echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "- 📦 **Commit**: \`${COMMIT}\` - ${MESSAGE}" >> $GITHUB_STEP_SUMMARY
                echo "- ⏱️ **Completed**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
                echo "- 🐳 **Backup Created**: \`${BACKUP}\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 📊 Container Status" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                docker compose ps >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
              
              rm -f /tmp/deployment_*
            fi

      - name: Create Failure Summary
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ -f /tmp/deployment_status ]; then
              COMMIT=$(cat /tmp/deployment_commit)
              BACKUP=$(cat /tmp/deployment_backup 2>/dev/null || echo "N/A")
              
              echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Health check failed after 30 attempts." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Commit**: \`${COMMIT}\`" >> $GITHUB_STEP_SUMMARY
              echo "- ⏱️ **Failed at**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
              echo "- 🐳 **Backup available**: \`${BACKUP}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check the deployment logs for details." >> $GITHUB_STEP_SUMMARY
              
              rm -f /tmp/deployment_*
            fi